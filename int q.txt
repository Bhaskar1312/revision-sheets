// 1. String concatenation, problem
// 2. javascript == vs ===
// 3. Why can't you compare Integer objects using == in Java?, use equals, problem
// boxed vs unboxed types
// 4. Builder pattern problem
// 5. Singleton pattern, bean 
// Prototype: Shallow copy and deep copy
// skip: Structural: Adapter, proxy, Decorator
// skip: Behavoiral: Observer, Strategy, State
// SOLID
// CrudRepository, JpaRepository @Transactional rollbackFor
// ?? and || in javascript
// Junit How to test void methods
// Serializable and Externalizable: Serializationa and deserialization
// problem solving: 2-sum problem or 3-sum problem or some topological sort related 
// Spring: @Autowired, @Qualifier, @Component, @Service, @Repository, @Controller, @Configuration, @Bean, @Scope, @Value, @PostConstruct, @PreDestroy, @Lazy, @Primary, @Conditional, @Profile, @Import, @ImportResource, @ComponentScan, @EnableAutoConfiguration, @SpringBootApplication, @EnableWebMvc, @EnableTransactionManagement, @EnableJpaRepositories, @EnableJpaAuditing, @EnableAsync, @EnableScheduling, @EnableCaching, @EnableAspectJAutoProxy, @EnableConfigurationProperties, @EnableConfigurationProperties
// Hoisting in javascript.
// Difference between var and let keyword in javascript.
// useEffect() vs useEffect(, []) vs useEffect(, [dependency])
// why is e.preventDefault() used in javascript.
// e.preventDefault() is used in JavaScript to prevent the default action of an event from occurring. For example, it can be used to stop a form from submitting, a link from being followed, or a context menu from appearing. This allows developers to handle the event with custom logic instead.
// difference between mvn install and verify/package
// equals and hashcode comparable Interface



// singleton
// (Default) Scopes a single bean definition to a single object instance for each Spring IoC container.
// prototype
// Scopes a single bean definition to any number of object instances.
// request
// Scopes a single bean definition to the lifecycle of a single HTTP request. That is, each HTTP request has its own instance of a bean created off the back of a single bean definition. Only valid in the context of a web-aware Spring ApplicationContext.
// session
// Scopes a single bean definition to the lifecycle of an HTTP Session. Only valid in the context of a web-aware Spring ApplicationContext.
// application
// Scopes a single bean definition to the lifecycle of a ServletContext. Only valid in the context of a web-aware Spring ApplicationContext.
// websocket

